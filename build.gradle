import groovy.json.JsonSlurper

import java.nio.charset.StandardCharsets
import java.nio.file.FileSystem
import java.nio.file.FileSystems
import java.nio.file.Files

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
    }
}

// TODO: Examine the switch from plain "android" to this some more
apply plugin: "com.android.application"

repositories {
    mavenLocal()

    // Good ole Maven central
    mavenCentral()

    jcenter()

    // For the Android libraries
    google()

    // Repos for LibGDX
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }

    // Terasology Artifactory for any shared libs
    maven { url "http://artifactory.terasology.org/artifactory/virtual-repo-live" }

    // everit-org JSON schema dependency
    maven { url "https://jitpack.io" }

    maven { url "https://maven.google.com" }
}

configurations {
    natives
}

dependencies {
    // TODO: Maybe exclude the commons-logging dependency from main (or set it as 'provided' here)
    api 'com.google.guava:guava:27.0.1-android'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.apache.commons:commons-vfs2:2.2'
    compile group: 'com.android.support', name: 'support-annotations', version: '28.0.0'
    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'net.sf.trove4j:trove4j:3.0.3'
    implementation 'com.google.protobuf:protobuf-java:3.4.0'
    implementation 'com.googlecode.gentyref:gentyref:1.2.0'
    compile(group: 'com.github.everit-org.json-schema', name: 'org.everit.json.schema', version: '1.9.2', ext: 'pom')

    compile(project(":engine"))
    compile(group: 'org.terasology.gestalt', name: 'gestalt-android', version: '7.0.3', ext: 'aar')

    compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
}

ext {
    // Set broken defaults just so Gradle won't complain about non-existent properties. Supply real values externally
    keyStoreToUse = "notset"
    storePassToUse = "notset"
    keyAliasToUse = "notset"
    keyPassToUse = "notset"

    compileSdk = 28
    minSdk = 24
    targetSdk = 28

    // Load values from properties passed to the project, such as via gradle.properties in the user's home .gradle dir
    if (project.hasProperty("signingKeystore")) {
        keyStoreToUse = signingKeystore
    }

    if (project.hasProperty("signingStorePass")) {
        storePassToUse = signingStorePass
    }

    if (project.hasProperty("signingKeyAlias")) {
        keyAliasToUse = signingKeyAlias
    }

    if (project.hasProperty("signingKeyPass")) {
        keyPassToUse = signingKeyPass
    }
}

android {
    compileSdkVersion(compileSdk)

    // Make it clear we're compiling for Java 8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            //aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
    }
    lintOptions {
        abortOnError false
    }

    defaultConfig {
        targetSdkVersion(targetSdk)
        minSdkVersion(minSdk)
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(keyStoreToUse)
            storePassword storePassToUse
            keyAlias keyAliasToUse
            keyPassword keyPassToUse
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
        }
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() { 
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if(outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}

def deleteDir(File dir) {
    File[] files = dir.listFiles()
    if (files != null) {
        for (File file in files) {
            deleteDir(file)
        }
    }

    dir.delete()
}

task copyModules() {
    inputs.dir("$rootDir/engine/src/main/resources/")
    inputs.dir("$rootDir/assets/")
    dependsOn ":engine:cacheReflections"

    doLast {
        // Clear the modules directory to ensure that it is up-to date
        deleteDir(new File("$projectDir/assets", "modules"))

        copy {
            from "$rootDir"
            into "$projectDir/assets"
            include "modules/**"
            exclude "modules/modules.iml"
            exclude "modules/*/*.iml"
            exclude "modules/*/README.md"
            exclude "modules/*/LICENSE.md"
            exclude "modules/*/build.gradle"
            exclude "modules/*/build"
            exclude "modules/*/src"
            exclude "modules/subprojects.gradle"
        }

        copy {
            from "$rootDir/engine/src/main/resources"
            into "$projectDir/assets/modules/engine"
            include "assets/**"
            include "module.json"
        }

        copy {
            from "$rootDir/engine/build/classes/java/main"
            into "$projectDir/assets/modules/engine"
            include "reflections.cache"
        }
    }
}

task modulesCompile
rootProject.destinationSolModules().each { module ->
    modulesCompile.dependsOn ":modules:$module.name" + ":compileJava"
}

task reflectModules() {
    for (module in rootProject.destinationSolModules()) {
        inputs.dir("${rootProject.projectDir}/modules/${module.name}/build/classes")
    }

    dependsOn modulesCompile
    dependsOn copyModules

    doLast {
        def path = androidSdkPath()
        def dexCommand = System.getProperty("os.name").toLowerCase().contains("windows") ? "d8.bat" : "d8"
        def buildToolsVersions = new File(path, "build-tools").listFiles(new FileFilter() {
            @Override
            boolean accept(File file) {
                return file.isDirectory() && file.name.startsWith("$compileSdk.")
            }
        })

        if (buildToolsVersions.length == 0) {
            throw new TaskExecutionException(reflectModules, new FileNotFoundException("The Android SDK build tools version $compileSdk could not be found."))
        }
        def dex = "${buildToolsVersions[0]}/$dexCommand"
        for (module in rootProject.destinationSolModules()) {
            def moduleVersion = new JsonSlurper().parseText(new File("$rootDir/modules/${module.name}/module.json").text).version
            def moduleClassesDir = "${rootProject.projectDir}/modules/${module.name}/build/classes/"
            def moduleClassesFiles = fileTree(moduleClassesDir).filter { it.isFile() && it.name.endsWith('.class')}.files
            def classesRootPath = new File(moduleClassesDir).toPath()
            def moduleClasses = []
            for (file in moduleClassesFiles) {
                moduleClasses.add(classesRootPath.relativize(file.toPath()))
            }
            if (moduleClasses.size() == 0) {
                // The dexed code jars are only produced for code-bearing modules.
                continue;
            }
            def jarOutputDir = "$projectDir/assets/modules/${module.name}-code-${moduleVersion}.jar"
            exec {
                workingDir moduleClassesDir
                commandLine (["$dex"] + moduleClasses + ['--classpath', "$rootDir/engine/build/classes",
                                                         '--lib', "$path/platforms/android-$compileSdk/android.jar",
                                                         '--min-api', "$minSdk",
                                                         '--output', "$jarOutputDir"])
            }
            FileSystem jarFileSystem
            try {
                jarFileSystem = FileSystems.newFileSystem(URI.create("jar:" + new File(jarOutputDir).toURI()), new HashMap<String, Object>())
                def moduleManifestContents =
                        "{\n" +
                        "    \"id\" : \"MODULE_ID\",\n" +
                        "    \"version\" : \"MODULE_VERSION\",\n" +
                        "    \"displayName\" : \"MODULE_NAME Code\",\n" +
                        "    \"description\" : \"Code for MODULE_NAME\",\n" +
                        "    \"dependencies\" :  [\n" +
                        "        {\n" +
                        "            \"id\" : \"MODULE_NAME\"\n" +
                        "        }\n" +
                        "    ]\n" +
                        "}"
                moduleManifestContents = moduleManifestContents
                        .replace("MODULE_ID", module.name + "-code")
                        .replace("MODULE_NAME", module.name)
                        .replace("MODULE_VERSION", moduleVersion)
                Files.write(jarFileSystem.getPath("module.json"), [moduleManifestContents], StandardCharsets.UTF_8)
                Files.createDirectories(jarFileSystem.getPath("build/classes"))
                moduleClassesFiles.each {
                    Files.copy(it.toPath(), jarFileSystem.getPath("/build/classes/${it.name}"))
                }
            } catch (Exception e) {
                e.printStackTrace()
            } finally {
                if (jarFileSystem != null) {
                    jarFileSystem.close()
                }
            }
        }
    }
}

preBuild.dependsOn(reflectModules)

def androidSdkPath() {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }
    return path
}

task android(type: Exec) {
    def path = androidSdkPath()
    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.miloshpetrov.sol2.android/com.miloshpetrov.sol2.android.SolAndroid'
}

task fastlane(type: Exec) {
    if (!project.hasProperty("lane")) {
        throw new StopExecutionException("Please specify lane to run. Usage: 'gradlew android:fastlane -Plane=lane'")
    }
    commandLine "fastlane", "$lane"
}

// sets up the Android Eclipse project, using the old Ant based build.
eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src", 'gen'
        }
    }

    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    classpath {
        plusConfigurations += [ project.configurations.compile ]        
        containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
    }

    project {
        name = appName + "-android"
        natures 'com.android.ide.eclipse.adt.AndroidNature'
        buildCommands.clear();
        buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        buildCommand "org.eclipse.jdt.core.javabuilder"
        buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.compile]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}
